# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "master" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - "master"

jobs:
  deploy:
    runs-on: ubuntu-latest

  steps:
    - uses: "actions/checkout@v3"
    - uses: azure/setup-kubectl@v2.0
      with:
        version: "v1.24.1" # default is latest stable
      id: install
    - id: "auth"
      name: "Authenticate to Google Cloud"
      uses: "google-github-actions/auth@v0"
      with:
        credentials_json: "${{ secrets.GCP_GCR_KEY }}"

    - uses: "docker/login-action@v1"
      with:
        registry: "gcr.io" # or REGION-docker.pkg.dev
        username: "oauth2accesstoken"
        password: "${{ steps.auth.outputs.access_token }}"

    # This example runs "docker login" directly to Container Registry.
    - run: |-
        echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://gcr.io
